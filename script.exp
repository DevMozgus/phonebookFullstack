#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Mon Aug 10 08:59:24 2020
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn gitpush.sh . $1
match_max 100000
send -- "\r"
expect -exact "\r
\[master 5174609\] initial commit\r
 2 files changed, 732 insertions(+)\r
warning: push.default is unset; its implicit value has changed in\r
Git 2.0 from 'matching' to 'simple'. To squelch this message\r
and maintain the traditional behavior, use:\r
\r
  git config --global push.default matching\r
\r
To squelch this message and adopt the new behavior now, use:\r
\r
  git config --global push.default simple\r
\r
When push.default is set to 'matching', git will push local branches\r
to the remote branches that already exist with the same name.\r
\r
Since Git 2.0, Git defaults to the more conservative 'simple'\r
behavior, which only pushes the current branch to the corresponding\r
remote branch that 'git pull' uses to update the current branch.\r
\r
See 'git help config' and search for 'push.default' for further information.\r
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode\r
'current' instead of 'simple' if you sometimes use older versions of Git)\r
\r
Password for 'https://nikolaki333@github.com': "
send -- "0d1567b1194fc3f8f7254185e603e70ef62c7832\r"
expect eof
